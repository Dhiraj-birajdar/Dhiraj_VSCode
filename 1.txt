<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Q1</title>
</head>

<body>
    <fieldset>
        <legend>
            <h1>String Operations</h1>
        </legend>
        <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
            <label for="inputString">Enter a string:</label>
            <input type="text" name="inputString"><br><br>

            <label for="separator">Choose a separator:</label>
            <select name="separator">
                <option value="#">#</option>
                <option value="|">|</option>
                <option value="%">%</option>
                <option value="@">@</option>
                <option value="!">!</option>
                <option value=",">,</option>
            </select><br><br>
            <input type="submit" value="Submit">
        </form>
    </fieldset>

    <?php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $inputString = $_POST["inputString"];
        $separator = $_POST["separator"];

        echo "<h2>Results:</h2>";

        $words = explode($separator, $inputString);
        echo "Split words: " . implode(", ", $words) . "<br><br>";

        $newSeparator = "*";
        $newString = str_replace($separator, $newSeparator, $inputString);
        echo "String with replaced separator: " . $newString . "<br><br>";

        $lastWord = end($words);
        echo "Last word in the string: " . $lastWord . "<br><br>";
    }
    ?>
</body>

</html>














import matplotlib.pyplot as plt
import numpy as np
from random import choices 

x = range(1,51)
y = np.random.randint(1,100,50)

plt.plot(x,y, marker='d',markerfacecolor='red', markersize=6, color='green', linewidth=2, label='Integer')

plt.xlabel("Points")
plt.ylabel("Random Integers")
plt.title("Line chart")
plt.legend(loc='lower right')
plt.grid()
plt.show()

rng = np.random.RandomState(0)
colors = rng.rand(50)
sizes = 1000*rng.rand(50)

plt.scatter(x,y, c=colors, s=sizes, alpha=0.3, marker='o')
plt.xlabel('Points')
plt.ylabel('Random Integers')
plt.title("Scatter Plot")
plt.grid()
plt.show()











import matplotlib.pyplot as plt

sub = ["English", "Data Science", "C", "DBMS", "Math"]
marks = [88, 78, 98, 95, 65]
colors = ['red', "blue", 'pink', 'orange', 'yellow']
explode = (0,0,0,0,0.1)

plt.pie(marks, explode=explode, labels=sub, colors=colors, autopct="%1.1f%%", shadow=False)
plt.axis('equal')
plt.title("Pie chart")
plt.show()












import pandas as pd
data = pd.read_csv("winequality-red.csv")

print("a) Describing the dataset:")
print(data.describe())
print("\n")

print(f"b) Shape of the dataset: {data.shape}")
print("\n")

print("c) Display first 3 rows from the dataset:")
print(data.head(3))













#include <stdio.h>
int FIFO(int ref[], int n, int f)
{
    int frames[f];
    int current = 0;
    int pagefaults = 0;

    for(int i=0;i<f;i++)
        frames[i] = -1;

    for(int i = 0;i<n;i++)
    {
        int cpage = ref[i];
        int pagefound = 0;

        for(int j = 0;j<f;j++)
            if(cpage == frames[j])
            {
                pagefound = 1;
                break;
            }

        if(!pagefound)
        {
            frames[current] = cpage;
            current = (current+1)%f;
            pagefaults++;
        }
    }
    return pagefaults;

}

int main()
{
    int ref[] = {8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2};
    int pages = 15, frames;
    printf("Enter no of Frames : ");
    scanf("%d",&frames);

    printf("Page Faults using FIFO : %d", FIFO(ref,pages,frames));
    return 0;
}













#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_TOKENS 10

void execute_command(char *tokens[]) {
    pid_t pid = fork();
    if (pid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        execvp(tokens[0], tokens);
        perror("Execution failed");
        exit(EXIT_FAILURE);
    } else {
        waitpid(pid, NULL, 0);
    }
}

void search_file(char *filename, char *pattern, int disall) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error opening file");
        return;
    }

    char line[MAX_COMMAND_LENGTH];
    int line_number = 1;

    while (fgets(line, sizeof(line), file) != NULL) {
        if (strstr(line, pattern) != NULL) {
            if (disall) {
                printf("Line %d: %s", line_number, line);
            } else {
                printf("First occurrence of '%s' found in %s at line %d: %s", pattern, filename, line_number, line);
                fclose(file);
                return;
            }
        }
        line_number++;
    }

    fclose(file);
}

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *tokens[MAX_TOKENS];

    while (1) {
        printf("myshell$ ");
        fgets(command, sizeof(command), stdin);

        int token_count = 0;
        char *token = strtok(command, " \n");
        while (token != NULL && token_count < MAX_TOKENS) {
            tokens[token_count++] = token;
            token = strtok(NULL, " \n");
        }
        tokens[token_count] = NULL;

        if (strcmp(tokens[0], "exit") == 0) {
            break;
        }

        if (strcmp(tokens[0], "search") == 0 && token_count >= 4) {
            char *file_name = tokens[2];
            char *pattern = tokens[3];
            int disall = (strcmp(tokens[1], "a") == 0);

            search_file(file_name, pattern, disall);
        } 
        else {
            execute_command(tokens);
        }
    }

    return 0;
}
